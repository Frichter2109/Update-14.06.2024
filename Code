#include <Adafruit_GFX.h>
#include <Adafruit_SSD1351.h>
#include <SPI.h>
#include <avr/pgmspace.h>
#include "Blitz.h"
#include "Kreuz.h"

// Screen dimensions
#define SCREEN_WIDTH  64
#define SCREEN_HEIGHT 128

// Pin configurations
#define SCK_PIN   SCK   // Serial Clock
#define MOSI_PIN  MOSI  // Master Out Slave In
#define DC_PIN    SDA   // Data/Command
#define CS_PIN    SCL   // Chip Select
#define RST_PIN   6     // Reset
#define SIGNAL_PIN_1 A0  // Eingang für Signal 1
#define SIGNAL_PIN_2 A1  // Eingang für Signal 2

// Color definitions
#define BLACK    0x0000
#define BLUE     0x001F
#define RED      0xF800
#define GREEN    0x07E0
#define CYAN     0x07FF
#define MAGENTA  0xF81F
#define YELLOW   0xFFE0  
#define WHITE    0xFFFF

// Create display object
Adafruit_SSD1351 display = Adafruit_SSD1351(SCREEN_WIDTH, SCREEN_HEIGHT, &SPI, CS_PIN, DC_PIN, RST_PIN);

// Variable to track the current displayed image
int currentImage = -1;

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Initialize display
  display.begin();
  display.setRotation(0); // Rotate the display (0, 1, 2, or 3 for 0°, 90°, 180°, or 270° rotation)
  display.fillScreen(BLACK); // Start with a black screen

  // Set pin modes
  pinMode(SIGNAL_PIN_1, INPUT);
  pinMode(SIGNAL_PIN_2, INPUT);
}

void drawBitmap(const uint16_t *bitmap, uint16_t w, uint16_t h) {
  for (uint16_t j = 0; j < h; j++) {
    for (uint16_t i = 0; i < w; i++ ) {
      uint16_t color = pgm_read_word(bitmap + i + j * w);
      display.drawPixel(i, j, color);
    }
  }
}

void loop() {
  // Read signals
  int signal1 = digitalRead(SIGNAL_PIN_1);
  int signal2 = digitalRead(SIGNAL_PIN_2);

  // Determine which action to take
  if (signal1 == HIGH && currentImage != 1) {
    display.fillScreen(BLACK); // Clear screen before drawing
    drawBitmap(BLITZ, SCREEN_WIDTH, SCREEN_HEIGHT); // Display Blitz bitmap
    currentImage = 1;
    Serial.println("Displaying Blitz bitmap");
  } else if (signal2 == HIGH && currentImage != 2) {
    display.fillScreen(BLACK); // Clear screen before drawing
    drawBitmap(KREUZ, SCREEN_WIDTH, SCREEN_HEIGHT); // Display Kreuz bitmap
    currentImage = 2;
    Serial.println("Displaying Kreuz bitmap");
  } else if (signal1 == LOW && signal2 == LOW && currentImage != 0) {
    display.fillScreen(BLACK); // Clear screen before drawing
    currentImage = 0;
    Serial.println("Clearing screen");
  }

  // Add a small delay to avoid flickering
  delay(100);
}
